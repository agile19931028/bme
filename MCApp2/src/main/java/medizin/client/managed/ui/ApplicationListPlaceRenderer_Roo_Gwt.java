// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package medizin.client.managed.ui;

import com.google.gwt.text.shared.AbstractRenderer;
import medizin.client.managed.request.AnswerProxy;
import medizin.client.managed.request.AnswerToAssQuestionProxy;
import medizin.client.managed.request.ApplicationEntityTypesProcessor;
import medizin.client.managed.request.AssesmentProxy;
import medizin.client.managed.request.AssesmentQuestionProxy;
import medizin.client.managed.request.CommentProxy;
import medizin.client.managed.request.EventAccessProxy;
import medizin.client.managed.request.InstitutionProxy;
import medizin.client.managed.request.KeywordProxy;
import medizin.client.managed.request.McProxy;
import medizin.client.managed.request.PersonProxy;
import medizin.client.managed.request.QuestionAccessProxy;
import medizin.client.managed.request.QuestionEventProxy;
import medizin.client.managed.request.QuestionProxy;
import medizin.client.managed.request.QuestionSumPerPersonProxy;
import medizin.client.managed.request.QuestionTypeCountPerExamProxy;
import medizin.client.managed.request.QuestionTypeProxy;
import medizin.client.managed.request.StaticContentProxy;
import medizin.client.managed.request.StaticToAssesmentProxy;
import medizin.client.scaffold.place.ProxyListPlace;

public abstract class ApplicationListPlaceRenderer_Roo_Gwt extends AbstractRenderer<ProxyListPlace> {

    public String render(ProxyListPlace object) {
        return new ApplicationEntityTypesProcessor<String>() {

            @Override
            public void handleStaticToAssesment(StaticToAssesmentProxy isNull) {
                setResult("StaticToAssesments");
            }

            @Override
            public void handleStaticContent(StaticContentProxy isNull) {
                setResult("StaticContents");
            }

            @Override
            public void handleQuestionType(QuestionTypeProxy isNull) {
                setResult("QuestionTypes");
            }

            @Override
            public void handleQuestionTypeCountPerExam(QuestionTypeCountPerExamProxy isNull) {
                setResult("QuestionTypeCountPerExams");
            }

            @Override
            public void handleQuestionSumPerPerson(QuestionSumPerPersonProxy isNull) {
                setResult("QuestionSumPerPersons");
            }

            @Override
            public void handleQuestion(QuestionProxy isNull) {
                setResult("Questions");
            }

            @Override
            public void handleQuestionEvent(QuestionEventProxy isNull) {
                setResult("QuestionEvents");
            }

            @Override
            public void handleQuestionAccess(QuestionAccessProxy isNull) {
                setResult("QuestionAccesss");
            }

            @Override
            public void handlePerson(PersonProxy isNull) {
                setResult("Persons");
            }

            @Override
            public void handleMc(McProxy isNull) {
                setResult("Mcs");
            }

            @Override
            public void handleKeyword(KeywordProxy isNull) {
                setResult("Keywords");
            }

            @Override
            public void handleInstitution(InstitutionProxy isNull) {
                setResult("Institutions");
            }

            @Override
            public void handleEventAccess(EventAccessProxy isNull) {
                setResult("EventAccesss");
            }

            @Override
            public void handleComment(CommentProxy isNull) {
                setResult("Comments");
            }

            @Override
            public void handleAssesmentQuestion(AssesmentQuestionProxy isNull) {
                setResult("AssesmentQuestions");
            }

            @Override
            public void handleAssesment(AssesmentProxy isNull) {
                setResult("Assesments");
            }

            @Override
            public void handleAnswerToAssQuestion(AnswerToAssQuestionProxy isNull) {
                setResult("AnswerToAssQuestions");
            }

            @Override
            public void handleAnswer(AnswerProxy isNull) {
                setResult("Answers");
            }
        }.process(object.getProxyClass());
    }
}
