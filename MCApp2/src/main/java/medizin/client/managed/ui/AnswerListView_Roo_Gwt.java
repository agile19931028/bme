// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package medizin.client.managed.ui;

import com.google.gwt.core.client.GWT;
import com.google.gwt.i18n.client.DateTimeFormat;
import com.google.gwt.text.client.DateTimeFormatRenderer;
import com.google.gwt.text.shared.AbstractRenderer;
import com.google.gwt.text.shared.Renderer;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.cellview.client.CellTable;
import com.google.gwt.user.cellview.client.HasKeyboardSelectionPolicy.KeyboardSelectionPolicy;
import com.google.gwt.user.cellview.client.TextColumn;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.HTMLPanel;
import java.util.HashSet;
import java.util.Set;
import medizin.client.managed.request.AnswerProxy;
import medizin.client.managed.request.PersonProxy;
import medizin.client.managed.request.QuestionProxy;
import medizin.client.scaffold.place.AbstractProxyListView;
import medizin.client.shared.Validity;

public abstract class AnswerListView_Roo_Gwt extends AbstractProxyListView<AnswerProxy> {

    @UiField
    CellTable<AnswerProxy> table;

    protected Set<String> paths = new HashSet<String>();

    public void init() {
        paths.add("dateAdded");
        table.addColumn(new TextColumn<AnswerProxy>() {

            Renderer<java.util.Date> renderer = new DateTimeFormatRenderer(DateTimeFormat.getFormat(DateTimeFormat.PredefinedFormat.DATE_SHORT));

            @Override
            public String getValue(AnswerProxy object) {
                return renderer.render(object.getDateAdded());
            }
        }, "Date Added");
        paths.add("dateChanged");
        table.addColumn(new TextColumn<AnswerProxy>() {

            Renderer<java.util.Date> renderer = new DateTimeFormatRenderer(DateTimeFormat.getFormat(DateTimeFormat.PredefinedFormat.DATE_SHORT));

            @Override
            public String getValue(AnswerProxy object) {
                return renderer.render(object.getDateChanged());
            }
        }, "Date Changed");
        paths.add("rewiewer");
        table.addColumn(new TextColumn<AnswerProxy>() {

            Renderer<medizin.client.managed.request.PersonProxy> renderer = medizin.client.managed.ui.PersonProxyRenderer.instance();

            @Override
            public String getValue(AnswerProxy object) {
                return renderer.render(object.getRewiewer());
            }
        }, "Rewiewer");
        paths.add("autor");
        table.addColumn(new TextColumn<AnswerProxy>() {

            Renderer<medizin.client.managed.request.PersonProxy> renderer = medizin.client.managed.ui.PersonProxyRenderer.instance();

            @Override
            public String getValue(AnswerProxy object) {
                return renderer.render(object.getAutor());
            }
        }, "Autor");
        paths.add("answerText");
        table.addColumn(new TextColumn<AnswerProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AnswerProxy object) {
                return renderer.render(object.getAnswerText());
            }
        }, "Answer Text");
        paths.add("isAnswerActive");
        table.addColumn(new TextColumn<AnswerProxy>() {

            Renderer<java.lang.Boolean> renderer = new AbstractRenderer<java.lang.Boolean>() {

                public String render(java.lang.Boolean obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AnswerProxy object) {
                return renderer.render(object.getIsAnswerActive());
            }
        }, "Is Answer Active");
        paths.add("isPicture");
        table.addColumn(new TextColumn<AnswerProxy>() {

            Renderer<java.lang.Boolean> renderer = new AbstractRenderer<java.lang.Boolean>() {

                public String render(java.lang.Boolean obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AnswerProxy object) {
                return renderer.render(object.getIsPicture());
            }
        }, "Is Picture");
        paths.add("isAnswerAcceptedReviewWahrer");
        table.addColumn(new TextColumn<AnswerProxy>() {

            Renderer<java.lang.Boolean> renderer = new AbstractRenderer<java.lang.Boolean>() {

                public String render(java.lang.Boolean obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AnswerProxy object) {
                return renderer.render(object.getIsAnswerAcceptedReviewWahrer());
            }
        }, "Is Answer Accepted Review Wahrer");
        paths.add("isAnswerAcceptedAutor");
        table.addColumn(new TextColumn<AnswerProxy>() {

            Renderer<java.lang.Boolean> renderer = new AbstractRenderer<java.lang.Boolean>() {

                public String render(java.lang.Boolean obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AnswerProxy object) {
                return renderer.render(object.getIsAnswerAcceptedAutor());
            }
        }, "Is Answer Accepted Autor");
        paths.add("isAnswerAcceptedAdmin");
        table.addColumn(new TextColumn<AnswerProxy>() {

            Renderer<java.lang.Boolean> renderer = new AbstractRenderer<java.lang.Boolean>() {

                public String render(java.lang.Boolean obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AnswerProxy object) {
                return renderer.render(object.getIsAnswerAcceptedAdmin());
            }
        }, "Is Answer Accepted Admin");
        paths.add("validity");
        table.addColumn(new TextColumn<AnswerProxy>() {

            Renderer<medizin.client.shared.Validity> renderer = new AbstractRenderer<medizin.client.shared.Validity>() {

                public String render(medizin.client.shared.Validity obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AnswerProxy object) {
                return renderer.render(object.getValidity());
            }
        }, "Validity");
        paths.add("picturePath");
        table.addColumn(new TextColumn<AnswerProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AnswerProxy object) {
                return renderer.render(object.getPicturePath());
            }
        }, "Picture Path");
        paths.add("question");
        table.addColumn(new TextColumn<AnswerProxy>() {

            Renderer<medizin.client.managed.request.QuestionProxy> renderer = medizin.client.managed.ui.QuestionProxyRenderer.instance();

            @Override
            public String getValue(AnswerProxy object) {
                return renderer.render(object.getQuestion());
            }
        }, "Question");
        paths.add("id");
        table.addColumn(new TextColumn<AnswerProxy>() {

            Renderer<java.lang.Long> renderer = new AbstractRenderer<java.lang.Long>() {

                public String render(java.lang.Long obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AnswerProxy object) {
                return renderer.render(object.getId());
            }
        }, "Id");
        paths.add("version");
        table.addColumn(new TextColumn<AnswerProxy>() {

            Renderer<java.lang.Integer> renderer = new AbstractRenderer<java.lang.Integer>() {

                public String render(java.lang.Integer obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AnswerProxy object) {
                return renderer.render(object.getVersion());
            }
        }, "Version");
    }
}
