// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package medizin.client.managed.request;

import com.google.gwt.requestfactory.shared.EntityProxy;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public abstract class ApplicationEntityTypesProcessor<T> {

    private final T defaultValue;

    private T result;

    public ApplicationEntityTypesProcessor() {
        defaultValue = null;
    }

    public ApplicationEntityTypesProcessor(T defaultValue) {
        this.defaultValue = defaultValue;
    }

    public static Set<java.lang.Class<? extends com.google.gwt.requestfactory.shared.EntityProxy>> getAll() {
        Set<Class<? extends EntityProxy>> rtn = new HashSet<Class<? extends EntityProxy>>();
        rtn.add(StaticToAssesmentProxy.class);
        rtn.add(StaticContentProxy.class);
        rtn.add(QuestionTypeProxy.class);
        rtn.add(QuestionTypeCountPerExamProxy.class);
        rtn.add(QuestionSumPerPersonProxy.class);
        rtn.add(QuestionProxy.class);
        rtn.add(QuestionEventProxy.class);
        rtn.add(QuestionAccessProxy.class);
        rtn.add(PersonProxy.class);
        rtn.add(McProxy.class);
        rtn.add(KeywordProxy.class);
        rtn.add(InstitutionProxy.class);
        rtn.add(EventAccessProxy.class);
        rtn.add(CommentProxy.class);
        rtn.add(AssesmentQuestionProxy.class);
        rtn.add(AssesmentProxy.class);
        rtn.add(AnswerToAssQuestionProxy.class);
        rtn.add(AnswerProxy.class);
        return Collections.unmodifiableSet(rtn);
    }

    private static void process(medizin.client.managed.request.ApplicationEntityTypesProcessor<?> processor, Class<?> clazz) {
        if (StaticToAssesmentProxy.class.equals(clazz)) {
            processor.handleStaticToAssesment((StaticToAssesmentProxy) null);
            return;
        }
        if (StaticContentProxy.class.equals(clazz)) {
            processor.handleStaticContent((StaticContentProxy) null);
            return;
        }
        if (QuestionTypeProxy.class.equals(clazz)) {
            processor.handleQuestionType((QuestionTypeProxy) null);
            return;
        }
        if (QuestionTypeCountPerExamProxy.class.equals(clazz)) {
            processor.handleQuestionTypeCountPerExam((QuestionTypeCountPerExamProxy) null);
            return;
        }
        if (QuestionSumPerPersonProxy.class.equals(clazz)) {
            processor.handleQuestionSumPerPerson((QuestionSumPerPersonProxy) null);
            return;
        }
        if (QuestionProxy.class.equals(clazz)) {
            processor.handleQuestion((QuestionProxy) null);
            return;
        }
        if (QuestionEventProxy.class.equals(clazz)) {
            processor.handleQuestionEvent((QuestionEventProxy) null);
            return;
        }
        if (QuestionAccessProxy.class.equals(clazz)) {
            processor.handleQuestionAccess((QuestionAccessProxy) null);
            return;
        }
        if (PersonProxy.class.equals(clazz)) {
            processor.handlePerson((PersonProxy) null);
            return;
        }
        if (McProxy.class.equals(clazz)) {
            processor.handleMc((McProxy) null);
            return;
        }
        if (KeywordProxy.class.equals(clazz)) {
            processor.handleKeyword((KeywordProxy) null);
            return;
        }
        if (InstitutionProxy.class.equals(clazz)) {
            processor.handleInstitution((InstitutionProxy) null);
            return;
        }
        if (EventAccessProxy.class.equals(clazz)) {
            processor.handleEventAccess((EventAccessProxy) null);
            return;
        }
        if (CommentProxy.class.equals(clazz)) {
            processor.handleComment((CommentProxy) null);
            return;
        }
        if (AssesmentQuestionProxy.class.equals(clazz)) {
            processor.handleAssesmentQuestion((AssesmentQuestionProxy) null);
            return;
        }
        if (AssesmentProxy.class.equals(clazz)) {
            processor.handleAssesment((AssesmentProxy) null);
            return;
        }
        if (AnswerToAssQuestionProxy.class.equals(clazz)) {
            processor.handleAnswerToAssQuestion((AnswerToAssQuestionProxy) null);
            return;
        }
        if (AnswerProxy.class.equals(clazz)) {
            processor.handleAnswer((AnswerProxy) null);
            return;
        }
        processor.handleNonProxy(null);
    }

    private static void process(medizin.client.managed.request.ApplicationEntityTypesProcessor<?> processor, Object proxy) {
        if (proxy instanceof StaticToAssesmentProxy) {
            processor.handleStaticToAssesment((StaticToAssesmentProxy) proxy);
            return;
        }
        if (proxy instanceof StaticContentProxy) {
            processor.handleStaticContent((StaticContentProxy) proxy);
            return;
        }
        if (proxy instanceof QuestionTypeProxy) {
            processor.handleQuestionType((QuestionTypeProxy) proxy);
            return;
        }
        if (proxy instanceof QuestionTypeCountPerExamProxy) {
            processor.handleQuestionTypeCountPerExam((QuestionTypeCountPerExamProxy) proxy);
            return;
        }
        if (proxy instanceof QuestionSumPerPersonProxy) {
            processor.handleQuestionSumPerPerson((QuestionSumPerPersonProxy) proxy);
            return;
        }
        if (proxy instanceof QuestionProxy) {
            processor.handleQuestion((QuestionProxy) proxy);
            return;
        }
        if (proxy instanceof QuestionEventProxy) {
            processor.handleQuestionEvent((QuestionEventProxy) proxy);
            return;
        }
        if (proxy instanceof QuestionAccessProxy) {
            processor.handleQuestionAccess((QuestionAccessProxy) proxy);
            return;
        }
        if (proxy instanceof PersonProxy) {
            processor.handlePerson((PersonProxy) proxy);
            return;
        }
        if (proxy instanceof McProxy) {
            processor.handleMc((McProxy) proxy);
            return;
        }
        if (proxy instanceof KeywordProxy) {
            processor.handleKeyword((KeywordProxy) proxy);
            return;
        }
        if (proxy instanceof InstitutionProxy) {
            processor.handleInstitution((InstitutionProxy) proxy);
            return;
        }
        if (proxy instanceof EventAccessProxy) {
            processor.handleEventAccess((EventAccessProxy) proxy);
            return;
        }
        if (proxy instanceof CommentProxy) {
            processor.handleComment((CommentProxy) proxy);
            return;
        }
        if (proxy instanceof AssesmentQuestionProxy) {
            processor.handleAssesmentQuestion((AssesmentQuestionProxy) proxy);
            return;
        }
        if (proxy instanceof AssesmentProxy) {
            processor.handleAssesment((AssesmentProxy) proxy);
            return;
        }
        if (proxy instanceof AnswerToAssQuestionProxy) {
            processor.handleAnswerToAssQuestion((AnswerToAssQuestionProxy) proxy);
            return;
        }
        if (proxy instanceof AnswerProxy) {
            processor.handleAnswer((AnswerProxy) proxy);
            return;
        }
        processor.handleNonProxy(proxy);
    }

    public void handleNonProxy(Object object) {
    }

    public abstract void handleStaticToAssesment(StaticToAssesmentProxy proxy);

    public abstract void handleStaticContent(StaticContentProxy proxy);

    public abstract void handleQuestionType(QuestionTypeProxy proxy);

    public abstract void handleQuestionTypeCountPerExam(QuestionTypeCountPerExamProxy proxy);

    public abstract void handleQuestionSumPerPerson(QuestionSumPerPersonProxy proxy);

    public abstract void handleQuestion(QuestionProxy proxy);

    public abstract void handleQuestionEvent(QuestionEventProxy proxy);

    public abstract void handleQuestionAccess(QuestionAccessProxy proxy);

    public abstract void handlePerson(PersonProxy proxy);

    public abstract void handleMc(McProxy proxy);

    public abstract void handleKeyword(KeywordProxy proxy);

    public abstract void handleInstitution(InstitutionProxy proxy);

    public abstract void handleEventAccess(EventAccessProxy proxy);

    public abstract void handleComment(CommentProxy proxy);

    public abstract void handleAssesmentQuestion(AssesmentQuestionProxy proxy);

    public abstract void handleAssesment(AssesmentProxy proxy);

    public abstract void handleAnswerToAssQuestion(AnswerToAssQuestionProxy proxy);

    public abstract void handleAnswer(AnswerProxy proxy);

    public T process(Class<?> clazz) {
        setResult(defaultValue);
        ApplicationEntityTypesProcessor.process(this, clazz);
        return result;
    }

    public T process(Object proxy) {
        setResult(defaultValue);
        ApplicationEntityTypesProcessor.process(this, proxy);
        return result;
    }

    protected void setResult(T result) {
        this.result = result;
    }
}
