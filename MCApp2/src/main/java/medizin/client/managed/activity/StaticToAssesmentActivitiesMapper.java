// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package medizin.client.managed.activity;

import com.google.gwt.activity.shared.Activity;
import com.google.gwt.place.shared.PlaceController;
import com.google.gwt.requestfactory.shared.EntityProxyId;
import com.google.gwt.requestfactory.shared.RequestContext;
import medizin.client.managed.request.ApplicationRequestFactory;
import medizin.client.managed.request.AssesmentProxy;
import medizin.client.managed.request.StaticContentProxy;
import medizin.client.managed.request.StaticToAssesmentProxy;
import medizin.client.managed.request.StaticToAssesmentRequest;
import medizin.client.managed.ui.StaticToAssesmentDetailsView;
import medizin.client.managed.ui.StaticToAssesmentEditView;
import medizin.client.managed.ui.StaticToAssesmentListView;
import medizin.client.managed.ui.StaticToAssesmentMobileDetailsView;
import medizin.client.managed.ui.StaticToAssesmentMobileEditView;
import medizin.client.scaffold.ScaffoldApp;
import medizin.client.scaffold.place.CreateAndEditProxy;
import medizin.client.scaffold.place.FindAndEditProxy;
import medizin.client.scaffold.place.ProxyPlace;

public class StaticToAssesmentActivitiesMapper {

    private final ApplicationRequestFactory requests;

    private final PlaceController placeController;

    public StaticToAssesmentActivitiesMapper(ApplicationRequestFactory requests, PlaceController placeController) {
        this.requests = requests;
        this.placeController = placeController;
    }

    public Activity getActivity(ProxyPlace place) {
        switch(place.getOperation()) {
            case DETAILS:
                return new StaticToAssesmentDetailsActivity((EntityProxyId<StaticToAssesmentProxy>) place.getProxyId(), requests, placeController, ScaffoldApp.isMobile() ? StaticToAssesmentMobileDetailsView.instance() : StaticToAssesmentDetailsView.instance());
            case EDIT:
                return makeEditActivity(place);
            case CREATE:
                return makeCreateActivity();
        }
        throw new IllegalArgumentException("Unknown operation " + place.getOperation());
    }

    @SuppressWarnings("unchecked")
    private EntityProxyId<medizin.client.managed.request.StaticToAssesmentProxy> coerceId(ProxyPlace place) {
        return (EntityProxyId<StaticToAssesmentProxy>) place.getProxyId();
    }

    private Activity makeCreateActivity() {
        StaticToAssesmentEditView.instance().setCreating(true);
        final StaticToAssesmentRequest request = requests.staticToAssesmentRequest();
        Activity activity = new CreateAndEditProxy<StaticToAssesmentProxy>(StaticToAssesmentProxy.class, request, ScaffoldApp.isMobile() ? StaticToAssesmentMobileEditView.instance() : StaticToAssesmentEditView.instance(), placeController) {

            @Override
            protected RequestContext createSaveRequest(StaticToAssesmentProxy proxy) {
                request.persist().using(proxy);
                return request;
            }
        };
        return new StaticToAssesmentEditActivityWrapper(requests, ScaffoldApp.isMobile() ? StaticToAssesmentMobileEditView.instance() : StaticToAssesmentEditView.instance(), activity, null);
    }

    private Activity makeEditActivity(ProxyPlace place) {
        StaticToAssesmentEditView.instance().setCreating(false);
        EntityProxyId<StaticToAssesmentProxy> proxyId = coerceId(place);
        Activity activity = new FindAndEditProxy<StaticToAssesmentProxy>(proxyId, requests, ScaffoldApp.isMobile() ? StaticToAssesmentMobileEditView.instance() : StaticToAssesmentEditView.instance(), placeController) {

            @Override
            protected RequestContext createSaveRequest(StaticToAssesmentProxy proxy) {
                StaticToAssesmentRequest request = requests.staticToAssesmentRequest();
                request.persist().using(proxy);
                return request;
            }
        };
        return new StaticToAssesmentEditActivityWrapper(requests, ScaffoldApp.isMobile() ? StaticToAssesmentMobileEditView.instance() : StaticToAssesmentEditView.instance(), activity, proxyId);
    }
}
