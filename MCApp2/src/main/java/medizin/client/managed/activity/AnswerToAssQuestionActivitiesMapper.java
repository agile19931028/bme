// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package medizin.client.managed.activity;

import com.google.gwt.activity.shared.Activity;
import com.google.gwt.place.shared.PlaceController;
import com.google.gwt.requestfactory.shared.EntityProxyId;
import com.google.gwt.requestfactory.shared.RequestContext;
import medizin.client.managed.request.AnswerProxy;
import medizin.client.managed.request.AnswerToAssQuestionProxy;
import medizin.client.managed.request.AnswerToAssQuestionRequest;
import medizin.client.managed.request.ApplicationRequestFactory;
import medizin.client.managed.request.AssesmentQuestionProxy;
import medizin.client.managed.ui.AnswerToAssQuestionDetailsView;
import medizin.client.managed.ui.AnswerToAssQuestionEditView;
import medizin.client.managed.ui.AnswerToAssQuestionListView;
import medizin.client.managed.ui.AnswerToAssQuestionMobileDetailsView;
import medizin.client.managed.ui.AnswerToAssQuestionMobileEditView;
import medizin.client.scaffold.ScaffoldApp;
import medizin.client.scaffold.place.CreateAndEditProxy;
import medizin.client.scaffold.place.FindAndEditProxy;
import medizin.client.scaffold.place.ProxyPlace;

public class AnswerToAssQuestionActivitiesMapper {

    private final ApplicationRequestFactory requests;

    private final PlaceController placeController;

    public AnswerToAssQuestionActivitiesMapper(ApplicationRequestFactory requests, PlaceController placeController) {
        this.requests = requests;
        this.placeController = placeController;
    }

    public Activity getActivity(ProxyPlace place) {
        switch(place.getOperation()) {
            case DETAILS:
                return new AnswerToAssQuestionDetailsActivity((EntityProxyId<AnswerToAssQuestionProxy>) place.getProxyId(), requests, placeController, ScaffoldApp.isMobile() ? AnswerToAssQuestionMobileDetailsView.instance() : AnswerToAssQuestionDetailsView.instance());
            case EDIT:
                return makeEditActivity(place);
            case CREATE:
                return makeCreateActivity();
        }
        throw new IllegalArgumentException("Unknown operation " + place.getOperation());
    }

    @SuppressWarnings("unchecked")
    private EntityProxyId<medizin.client.managed.request.AnswerToAssQuestionProxy> coerceId(ProxyPlace place) {
        return (EntityProxyId<AnswerToAssQuestionProxy>) place.getProxyId();
    }

    private Activity makeCreateActivity() {
        AnswerToAssQuestionEditView.instance().setCreating(true);
        final AnswerToAssQuestionRequest request = requests.answerToAssQuestionRequest();
        Activity activity = new CreateAndEditProxy<AnswerToAssQuestionProxy>(AnswerToAssQuestionProxy.class, request, ScaffoldApp.isMobile() ? AnswerToAssQuestionMobileEditView.instance() : AnswerToAssQuestionEditView.instance(), placeController) {

            @Override
            protected RequestContext createSaveRequest(AnswerToAssQuestionProxy proxy) {
                request.persist().using(proxy);
                return request;
            }
        };
        return new AnswerToAssQuestionEditActivityWrapper(requests, ScaffoldApp.isMobile() ? AnswerToAssQuestionMobileEditView.instance() : AnswerToAssQuestionEditView.instance(), activity, null);
    }

    private Activity makeEditActivity(ProxyPlace place) {
        AnswerToAssQuestionEditView.instance().setCreating(false);
        EntityProxyId<AnswerToAssQuestionProxy> proxyId = coerceId(place);
        Activity activity = new FindAndEditProxy<AnswerToAssQuestionProxy>(proxyId, requests, ScaffoldApp.isMobile() ? AnswerToAssQuestionMobileEditView.instance() : AnswerToAssQuestionEditView.instance(), placeController) {

            @Override
            protected RequestContext createSaveRequest(AnswerToAssQuestionProxy proxy) {
                AnswerToAssQuestionRequest request = requests.answerToAssQuestionRequest();
                request.persist().using(proxy);
                return request;
            }
        };
        return new AnswerToAssQuestionEditActivityWrapper(requests, ScaffoldApp.isMobile() ? AnswerToAssQuestionMobileEditView.instance() : AnswerToAssQuestionEditView.instance(), activity, proxyId);
    }
}
