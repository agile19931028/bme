// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package medizin.client.managed.activity;

import com.google.gwt.activity.shared.Activity;
import com.google.gwt.activity.shared.ActivityMapper;
import com.google.gwt.place.shared.Place;
import com.google.gwt.place.shared.PlaceController;
import com.google.inject.Inject;
import medizin.client.managed.request.AnswerProxy;
import medizin.client.managed.request.AnswerToAssQuestionProxy;
import medizin.client.managed.request.ApplicationEntityTypesProcessor;
import medizin.client.managed.request.ApplicationRequestFactory;
import medizin.client.managed.request.AssesmentProxy;
import medizin.client.managed.request.AssesmentQuestionProxy;
import medizin.client.managed.request.CommentProxy;
import medizin.client.managed.request.EventAccessProxy;
import medizin.client.managed.request.InstitutionProxy;
import medizin.client.managed.request.KeywordProxy;
import medizin.client.managed.request.McProxy;
import medizin.client.managed.request.PersonProxy;
import medizin.client.managed.request.QuestionAccessProxy;
import medizin.client.managed.request.QuestionEventProxy;
import medizin.client.managed.request.QuestionProxy;
import medizin.client.managed.request.QuestionSumPerPersonProxy;
import medizin.client.managed.request.QuestionTypeCountPerExamProxy;
import medizin.client.managed.request.QuestionTypeProxy;
import medizin.client.managed.request.StaticContentProxy;
import medizin.client.managed.request.StaticToAssesmentProxy;
import medizin.client.scaffold.place.ProxyPlace;

public abstract class ApplicationDetailsActivities_Roo_Gwt implements ActivityMapper {

    protected ApplicationRequestFactory requests;

    protected PlaceController placeController;

    public Activity getActivity(Place place) {
        if (!(place instanceof ProxyPlace)) {
            return null;
        }
        final ProxyPlace proxyPlace = (ProxyPlace) place;
        return new ApplicationEntityTypesProcessor<Activity>() {

            @Override
            public void handleStaticToAssesment(StaticToAssesmentProxy proxy) {
                setResult(new StaticToAssesmentActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleStaticContent(StaticContentProxy proxy) {
                setResult(new StaticContentActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleQuestionType(QuestionTypeProxy proxy) {
                setResult(new QuestionTypeActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleQuestionTypeCountPerExam(QuestionTypeCountPerExamProxy proxy) {
                setResult(new QuestionTypeCountPerExamActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleQuestionSumPerPerson(QuestionSumPerPersonProxy proxy) {
                setResult(new QuestionSumPerPersonActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleQuestion(QuestionProxy proxy) {
                setResult(new QuestionActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleQuestionEvent(QuestionEventProxy proxy) {
                setResult(new QuestionEventActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleQuestionAccess(QuestionAccessProxy proxy) {
                setResult(new QuestionAccessActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handlePerson(PersonProxy proxy) {
                setResult(new PersonActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleMc(McProxy proxy) {
                setResult(new McActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleKeyword(KeywordProxy proxy) {
                setResult(new KeywordActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleInstitution(InstitutionProxy proxy) {
                setResult(new InstitutionActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleEventAccess(EventAccessProxy proxy) {
                setResult(new EventAccessActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleComment(CommentProxy proxy) {
                setResult(new CommentActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleAssesmentQuestion(AssesmentQuestionProxy proxy) {
                setResult(new AssesmentQuestionActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleAssesment(AssesmentProxy proxy) {
                setResult(new AssesmentActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleAnswerToAssQuestion(AnswerToAssQuestionProxy proxy) {
                setResult(new AnswerToAssQuestionActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }

            @Override
            public void handleAnswer(AnswerProxy proxy) {
                setResult(new AnswerActivitiesMapper(requests, placeController).getActivity(proxyPlace));
            }
        }.process(proxyPlace.getProxyClass());
    }
}
