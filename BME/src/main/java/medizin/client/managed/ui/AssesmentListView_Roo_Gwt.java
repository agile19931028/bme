// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package medizin.client.managed.ui;

import com.google.gwt.core.client.GWT;
import com.google.gwt.i18n.client.DateTimeFormat;
import com.google.gwt.text.client.DateTimeFormatRenderer;
import com.google.gwt.text.shared.AbstractRenderer;
import com.google.gwt.text.shared.Renderer;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.user.cellview.client.CellTable;
import com.google.gwt.user.cellview.client.HasKeyboardSelectionPolicy.KeyboardSelectionPolicy;
import com.google.gwt.user.cellview.client.TextColumn;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.HTMLPanel;
import java.util.HashSet;
import java.util.Set;
import medizin.client.managed.request.AssesmentProxy;
import medizin.client.managed.request.McProxy;
import medizin.client.scaffold.place.AbstractProxyListView;

public abstract class AssesmentListView_Roo_Gwt extends AbstractProxyListView<AssesmentProxy> {

    @UiField
    CellTable<AssesmentProxy> table;

    protected Set<String> paths = new HashSet<String>();

    public void init() {
        paths.add("name");
        table.addColumn(new TextColumn<AssesmentProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AssesmentProxy object) {
                return renderer.render(object.getName());
            }
        }, "Name");
        paths.add("dateOfAssesment");
        table.addColumn(new TextColumn<AssesmentProxy>() {

            Renderer<java.util.Date> renderer = new DateTimeFormatRenderer(DateTimeFormat.getFormat(DateTimeFormat.PredefinedFormat.DATE_SHORT));

            @Override
            public String getValue(AssesmentProxy object) {
                return renderer.render(object.getDateOfAssesment());
            }
        }, "Date Of Assesment");
        paths.add("dateOpen");
        table.addColumn(new TextColumn<AssesmentProxy>() {

            Renderer<java.util.Date> renderer = new DateTimeFormatRenderer(DateTimeFormat.getFormat(DateTimeFormat.PredefinedFormat.DATE_SHORT));

            @Override
            public String getValue(AssesmentProxy object) {
                return renderer.render(object.getDateOpen());
            }
        }, "Date Open");
        paths.add("dateClosed");
        table.addColumn(new TextColumn<AssesmentProxy>() {

            Renderer<java.util.Date> renderer = new DateTimeFormatRenderer(DateTimeFormat.getFormat(DateTimeFormat.PredefinedFormat.DATE_SHORT));

            @Override
            public String getValue(AssesmentProxy object) {
                return renderer.render(object.getDateClosed());
            }
        }, "Date Closed");
        paths.add("place");
        table.addColumn(new TextColumn<AssesmentProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AssesmentProxy object) {
                return renderer.render(object.getPlace());
            }
        }, "Place");
        paths.add("logo");
        table.addColumn(new TextColumn<AssesmentProxy>() {

            Renderer<java.lang.String> renderer = new AbstractRenderer<java.lang.String>() {

                public String render(java.lang.String obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AssesmentProxy object) {
                return renderer.render(object.getLogo());
            }
        }, "Logo");
        paths.add("isClosed");
        table.addColumn(new TextColumn<AssesmentProxy>() {

            Renderer<java.lang.Boolean> renderer = new AbstractRenderer<java.lang.Boolean>() {

                public String render(java.lang.Boolean obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AssesmentProxy object) {
                return renderer.render(object.getIsClosed());
            }
        }, "Is Closed");
        paths.add("assesmentVersion");
        table.addColumn(new TextColumn<AssesmentProxy>() {

            Renderer<java.lang.Integer> renderer = new AbstractRenderer<java.lang.Integer>() {

                public String render(java.lang.Integer obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AssesmentProxy object) {
                return renderer.render(object.getAssesmentVersion());
            }
        }, "Assesment Version");
        paths.add("mc");
        table.addColumn(new TextColumn<AssesmentProxy>() {

            Renderer<medizin.client.managed.request.McProxy> renderer = medizin.client.managed.ui.McProxyRenderer.instance();

            @Override
            public String getValue(AssesmentProxy object) {
                return renderer.render(object.getMc());
            }
        }, "Mc");
        paths.add("repeFor");
        table.addColumn(new TextColumn<AssesmentProxy>() {

            Renderer<medizin.client.managed.request.AssesmentProxy> renderer = medizin.client.managed.ui.AssesmentProxyRenderer.instance();

            @Override
            public String getValue(AssesmentProxy object) {
                return renderer.render(object.getRepeFor());
            }
        }, "Repe For");
        paths.add("percentSameQuestion");
        table.addColumn(new TextColumn<AssesmentProxy>() {

            Renderer<java.lang.Integer> renderer = new AbstractRenderer<java.lang.Integer>() {

                public String render(java.lang.Integer obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AssesmentProxy object) {
                return renderer.render(object.getPercentSameQuestion());
            }
        }, "Percent Same Question");
        paths.add("id");
        table.addColumn(new TextColumn<AssesmentProxy>() {

            Renderer<java.lang.Long> renderer = new AbstractRenderer<java.lang.Long>() {

                public String render(java.lang.Long obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AssesmentProxy object) {
                return renderer.render(object.getId());
            }
        }, "Id");
        paths.add("version");
        table.addColumn(new TextColumn<AssesmentProxy>() {

            Renderer<java.lang.Integer> renderer = new AbstractRenderer<java.lang.Integer>() {

                public String render(java.lang.Integer obj) {
                    return obj == null ? "" : String.valueOf(obj);
                }
            };

            @Override
            public String getValue(AssesmentProxy object) {
                return renderer.render(object.getVersion());
            }
        }, "Version");
    }
}
