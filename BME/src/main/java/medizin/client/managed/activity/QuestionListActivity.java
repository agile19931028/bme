// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package medizin.client.managed.activity;

import com.google.gwt.place.shared.Place;
import com.google.gwt.place.shared.PlaceController;
import com.google.gwt.requestfactory.shared.Receiver;
import com.google.gwt.requestfactory.shared.Request;
import com.google.gwt.view.client.Range;
import java.util.List;
import java.util.Set;
import medizin.client.managed.request.AnswerProxy;
import medizin.client.managed.request.ApplicationRequestFactory;
import medizin.client.managed.request.CommentProxy;
import medizin.client.managed.request.KeywordProxy;
import medizin.client.managed.request.McProxy;
import medizin.client.managed.request.PersonProxy;
import medizin.client.managed.request.QuestionEventProxy;
import medizin.client.managed.request.QuestionProxy;
import medizin.client.managed.request.QuestionTypeProxy;
import medizin.client.managed.ui.AnswerSetEditor;
import medizin.client.managed.ui.KeywordSetEditor;
import medizin.client.managed.ui.McSetEditor;
import medizin.client.scaffold.ScaffoldMobileApp;
import medizin.client.scaffold.activity.IsScaffoldMobileActivity;
import medizin.client.scaffold.place.AbstractProxyListActivity;
import medizin.client.scaffold.place.ProxyListView;

public class QuestionListActivity extends AbstractProxyListActivity<QuestionProxy> implements IsScaffoldMobileActivity {

    private final ApplicationRequestFactory requests;

    public QuestionListActivity(ApplicationRequestFactory requests, ProxyListView<medizin.client.managed.request.QuestionProxy> view, PlaceController placeController) {
        super(placeController, view, QuestionProxy.class);
        this.requests = requests;
    }

    public Place getBackButtonPlace() {
        return ScaffoldMobileApp.ROOT_PLACE;
    }

    public String getBackButtonText() {
        return "Entities";
    }

    public Place getEditButtonPlace() {
        return null;
    }

    public String getTitleText() {
        return "Questions";
    }

    public boolean hasEditButton() {
        return false;
    }

    protected Request<java.util.List<medizin.client.managed.request.QuestionProxy>> createRangeRequest(Range range) {
        return requests.questionRequest().findQuestionEntries(range.getStart(), range.getLength());
    }

    protected void fireCountRequest(Receiver<Long> callback) {
        requests.questionRequest().countQuestions().fire(callback);
    }
}
