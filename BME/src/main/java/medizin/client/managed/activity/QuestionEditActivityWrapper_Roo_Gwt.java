// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package medizin.client.managed.activity;

import com.google.gwt.activity.shared.Activity;
import com.google.gwt.event.shared.EventBus;
import com.google.gwt.place.shared.Place;
import com.google.gwt.requestfactory.shared.EntityProxyId;
import com.google.gwt.requestfactory.shared.Receiver;
import com.google.gwt.user.client.ui.AcceptsOneWidget;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Set;
import medizin.client.managed.activity.QuestionEditActivityWrapper.View;
import medizin.client.managed.request.AnswerProxy;
import medizin.client.managed.request.ApplicationRequestFactory;
import medizin.client.managed.request.CommentProxy;
import medizin.client.managed.request.KeywordProxy;
import medizin.client.managed.request.McProxy;
import medizin.client.managed.request.PersonProxy;
import medizin.client.managed.request.QuestionEventProxy;
import medizin.client.managed.request.QuestionProxy;
import medizin.client.managed.request.QuestionTypeProxy;
import medizin.client.managed.ui.AnswerSetEditor;
import medizin.client.managed.ui.KeywordSetEditor;
import medizin.client.managed.ui.McSetEditor;
import medizin.client.scaffold.activity.IsScaffoldMobileActivity;
import medizin.client.scaffold.place.ProxyEditView;
import medizin.client.scaffold.place.ProxyListPlace;
import medizin.client.scaffold.place.ProxyPlace;

public abstract class QuestionEditActivityWrapper_Roo_Gwt implements Activity, IsScaffoldMobileActivity {

    protected Activity wrapped;

    protected View<?> view;

    protected ApplicationRequestFactory requests;

    @Override
    public void start(AcceptsOneWidget display, EventBus eventBus) {
        view.setPreviousVersionPickerValues(Collections.<QuestionProxy>emptyList());
        requests.questionRequest().findQuestionEntries(0, 50).with(medizin.client.managed.ui.QuestionProxyRenderer.instance().getPaths()).fire(new Receiver<List<QuestionProxy>>() {

            public void onSuccess(List<QuestionProxy> response) {
                List<QuestionProxy> values = new ArrayList<QuestionProxy>();
                values.add(null);
                values.addAll(response);
                view.setPreviousVersionPickerValues(values);
            }
        });
        view.setKeywordsPickerValues(Collections.<KeywordProxy>emptyList());
        requests.keywordRequest().findKeywordEntries(0, 50).with(medizin.client.managed.ui.KeywordProxyRenderer.instance().getPaths()).fire(new Receiver<List<KeywordProxy>>() {

            public void onSuccess(List<KeywordProxy> response) {
                List<KeywordProxy> values = new ArrayList<KeywordProxy>();
                values.add(null);
                values.addAll(response);
                view.setKeywordsPickerValues(values);
            }
        });
        view.setQuestEventPickerValues(Collections.<QuestionEventProxy>emptyList());
        requests.questionEventRequest().findQuestionEventEntries(0, 50).with(medizin.client.managed.ui.QuestionEventProxyRenderer.instance().getPaths()).fire(new Receiver<List<QuestionEventProxy>>() {

            public void onSuccess(List<QuestionEventProxy> response) {
                List<QuestionEventProxy> values = new ArrayList<QuestionEventProxy>();
                values.add(null);
                values.addAll(response);
                view.setQuestEventPickerValues(values);
            }
        });
        view.setCommentPickerValues(Collections.<CommentProxy>emptyList());
        requests.commentRequest().findCommentEntries(0, 50).with(medizin.client.managed.ui.CommentProxyRenderer.instance().getPaths()).fire(new Receiver<List<CommentProxy>>() {

            public void onSuccess(List<CommentProxy> response) {
                List<CommentProxy> values = new ArrayList<CommentProxy>();
                values.add(null);
                values.addAll(response);
                view.setCommentPickerValues(values);
            }
        });
        view.setQuestionTypePickerValues(Collections.<QuestionTypeProxy>emptyList());
        requests.questionTypeRequest().findQuestionTypeEntries(0, 50).with(medizin.client.managed.ui.QuestionTypeProxyRenderer.instance().getPaths()).fire(new Receiver<List<QuestionTypeProxy>>() {

            public void onSuccess(List<QuestionTypeProxy> response) {
                List<QuestionTypeProxy> values = new ArrayList<QuestionTypeProxy>();
                values.add(null);
                values.addAll(response);
                view.setQuestionTypePickerValues(values);
            }
        });
        view.setMcsPickerValues(Collections.<McProxy>emptyList());
        requests.mcRequest().findMcEntries(0, 50).with(medizin.client.managed.ui.McProxyRenderer.instance().getPaths()).fire(new Receiver<List<McProxy>>() {

            public void onSuccess(List<McProxy> response) {
                List<McProxy> values = new ArrayList<McProxy>();
                values.add(null);
                values.addAll(response);
                view.setMcsPickerValues(values);
            }
        });
        view.setAnswersPickerValues(Collections.<AnswerProxy>emptyList());
        requests.answerRequest().findAnswerEntries(0, 50).with(medizin.client.managed.ui.AnswerProxyRenderer.instance().getPaths()).fire(new Receiver<List<AnswerProxy>>() {

            public void onSuccess(List<AnswerProxy> response) {
                List<AnswerProxy> values = new ArrayList<AnswerProxy>();
                values.add(null);
                values.addAll(response);
                view.setAnswersPickerValues(values);
            }
        });
        view.setRewiewerPickerValues(Collections.<PersonProxy>emptyList());
        requests.personRequest().findPersonEntries(0, 50).with(medizin.client.managed.ui.PersonProxyRenderer.instance().getPaths()).fire(new Receiver<List<PersonProxy>>() {

            public void onSuccess(List<PersonProxy> response) {
                List<PersonProxy> values = new ArrayList<PersonProxy>();
                values.add(null);
                values.addAll(response);
                view.setRewiewerPickerValues(values);
            }
        });
        view.setAutorPickerValues(Collections.<PersonProxy>emptyList());
        requests.personRequest().findPersonEntries(0, 50).with(medizin.client.managed.ui.PersonProxyRenderer.instance().getPaths()).fire(new Receiver<List<PersonProxy>>() {

            public void onSuccess(List<PersonProxy> response) {
                List<PersonProxy> values = new ArrayList<PersonProxy>();
                values.add(null);
                values.addAll(response);
                view.setAutorPickerValues(values);
            }
        });
        wrapped.start(display, eventBus);
    }

    public interface View_Roo_Gwt<V extends medizin.client.scaffold.place.ProxyEditView<medizin.client.managed.request.QuestionProxy, V>> extends ProxyEditView<QuestionProxy, V> {

        void setPreviousVersionPickerValues(Collection<QuestionProxy> values);

        void setKeywordsPickerValues(Collection<KeywordProxy> values);

        void setQuestEventPickerValues(Collection<QuestionEventProxy> values);

        void setCommentPickerValues(Collection<CommentProxy> values);

        void setQuestionTypePickerValues(Collection<QuestionTypeProxy> values);

        void setMcsPickerValues(Collection<McProxy> values);

        void setAnswersPickerValues(Collection<AnswerProxy> values);

        void setRewiewerPickerValues(Collection<PersonProxy> values);

        void setAutorPickerValues(Collection<PersonProxy> values);
    }
}
