// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package medizin.client.managed.activity;

import com.google.gwt.activity.shared.Activity;
import com.google.gwt.activity.shared.ActivityMapper;
import com.google.gwt.place.shared.Place;
import com.google.gwt.place.shared.PlaceController;
import com.google.inject.Inject;
import medizin.client.managed.request.AnswerProxy;
import medizin.client.managed.request.AnswerToAssQuestionProxy;
import medizin.client.managed.request.ApplicationEntityTypesProcessor;
import medizin.client.managed.request.ApplicationRequestFactory;
import medizin.client.managed.request.AssesmentProxy;
import medizin.client.managed.request.AssesmentQuestionProxy;
import medizin.client.managed.request.CommentProxy;
import medizin.client.managed.request.EventAccessProxy;
import medizin.client.managed.request.InstitutionProxy;
import medizin.client.managed.request.KeywordProxy;
import medizin.client.managed.request.McProxy;
import medizin.client.managed.request.PersonProxy;
import medizin.client.managed.request.QuestionAccessProxy;
import medizin.client.managed.request.QuestionEventProxy;
import medizin.client.managed.request.QuestionProxy;
import medizin.client.managed.request.QuestionSumPerPersonProxy;
import medizin.client.managed.request.QuestionTypeCountPerExamProxy;
import medizin.client.managed.request.QuestionTypeProxy;
import medizin.client.managed.request.StaticContentProxy;
import medizin.client.managed.request.StaticToAssesmentProxy;
import medizin.client.managed.ui.AnswerListView;
import medizin.client.managed.ui.AnswerMobileListView;
import medizin.client.managed.ui.AnswerToAssQuestionListView;
import medizin.client.managed.ui.AnswerToAssQuestionMobileListView;
import medizin.client.managed.ui.AssesmentListView;
import medizin.client.managed.ui.AssesmentMobileListView;
import medizin.client.managed.ui.AssesmentQuestionListView;
import medizin.client.managed.ui.AssesmentQuestionMobileListView;
import medizin.client.managed.ui.CommentListView;
import medizin.client.managed.ui.CommentMobileListView;
import medizin.client.managed.ui.EventAccessListView;
import medizin.client.managed.ui.EventAccessMobileListView;
import medizin.client.managed.ui.InstitutionListView;
import medizin.client.managed.ui.InstitutionMobileListView;
import medizin.client.managed.ui.KeywordListView;
import medizin.client.managed.ui.KeywordMobileListView;
import medizin.client.managed.ui.McListView;
import medizin.client.managed.ui.McMobileListView;
import medizin.client.managed.ui.PersonListView;
import medizin.client.managed.ui.PersonMobileListView;
import medizin.client.managed.ui.QuestionAccessListView;
import medizin.client.managed.ui.QuestionAccessMobileListView;
import medizin.client.managed.ui.QuestionEventListView;
import medizin.client.managed.ui.QuestionEventMobileListView;
import medizin.client.managed.ui.QuestionListView;
import medizin.client.managed.ui.QuestionMobileListView;
import medizin.client.managed.ui.QuestionSumPerPersonListView;
import medizin.client.managed.ui.QuestionSumPerPersonMobileListView;
import medizin.client.managed.ui.QuestionTypeCountPerExamListView;
import medizin.client.managed.ui.QuestionTypeCountPerExamMobileListView;
import medizin.client.managed.ui.QuestionTypeListView;
import medizin.client.managed.ui.QuestionTypeMobileListView;
import medizin.client.managed.ui.StaticContentListView;
import medizin.client.managed.ui.StaticContentMobileListView;
import medizin.client.managed.ui.StaticToAssesmentListView;
import medizin.client.managed.ui.StaticToAssesmentMobileListView;
import medizin.client.scaffold.ScaffoldApp;
import medizin.client.scaffold.place.ProxyListPlace;

public abstract class ApplicationMasterActivities_Roo_Gwt implements ActivityMapper {

    protected ApplicationRequestFactory requests;

    protected PlaceController placeController;

    public Activity getActivity(Place place) {
        if (!(place instanceof ProxyListPlace)) {
            return null;
        }
        ProxyListPlace listPlace = (ProxyListPlace) place;
        return new ApplicationEntityTypesProcessor<Activity>() {

            @Override
            public void handleStaticToAssesment(StaticToAssesmentProxy isNull) {
                setResult(new StaticToAssesmentListActivity(requests, ScaffoldApp.isMobile() ? StaticToAssesmentMobileListView.instance() : StaticToAssesmentListView.instance(), placeController));
            }

            @Override
            public void handleStaticContent(StaticContentProxy isNull) {
                setResult(new StaticContentListActivity(requests, ScaffoldApp.isMobile() ? StaticContentMobileListView.instance() : StaticContentListView.instance(), placeController));
            }

            @Override
            public void handleQuestionType(QuestionTypeProxy isNull) {
                setResult(new QuestionTypeListActivity(requests, ScaffoldApp.isMobile() ? QuestionTypeMobileListView.instance() : QuestionTypeListView.instance(), placeController));
            }

            @Override
            public void handleQuestionTypeCountPerExam(QuestionTypeCountPerExamProxy isNull) {
                setResult(new QuestionTypeCountPerExamListActivity(requests, ScaffoldApp.isMobile() ? QuestionTypeCountPerExamMobileListView.instance() : QuestionTypeCountPerExamListView.instance(), placeController));
            }

            @Override
            public void handleQuestionSumPerPerson(QuestionSumPerPersonProxy isNull) {
                setResult(new QuestionSumPerPersonListActivity(requests, ScaffoldApp.isMobile() ? QuestionSumPerPersonMobileListView.instance() : QuestionSumPerPersonListView.instance(), placeController));
            }

            @Override
            public void handleQuestion(QuestionProxy isNull) {
                setResult(new QuestionListActivity(requests, ScaffoldApp.isMobile() ? QuestionMobileListView.instance() : QuestionListView.instance(), placeController));
            }

            @Override
            public void handleQuestionEvent(QuestionEventProxy isNull) {
                setResult(new QuestionEventListActivity(requests, ScaffoldApp.isMobile() ? QuestionEventMobileListView.instance() : QuestionEventListView.instance(), placeController));
            }

            @Override
            public void handleQuestionAccess(QuestionAccessProxy isNull) {
                setResult(new QuestionAccessListActivity(requests, ScaffoldApp.isMobile() ? QuestionAccessMobileListView.instance() : QuestionAccessListView.instance(), placeController));
            }

            @Override
            public void handlePerson(PersonProxy isNull) {
                setResult(new PersonListActivity(requests, ScaffoldApp.isMobile() ? PersonMobileListView.instance() : PersonListView.instance(), placeController));
            }

            @Override
            public void handleMc(McProxy isNull) {
                setResult(new McListActivity(requests, ScaffoldApp.isMobile() ? McMobileListView.instance() : McListView.instance(), placeController));
            }

            @Override
            public void handleKeyword(KeywordProxy isNull) {
                setResult(new KeywordListActivity(requests, ScaffoldApp.isMobile() ? KeywordMobileListView.instance() : KeywordListView.instance(), placeController));
            }

            @Override
            public void handleInstitution(InstitutionProxy isNull) {
                setResult(new InstitutionListActivity(requests, ScaffoldApp.isMobile() ? InstitutionMobileListView.instance() : InstitutionListView.instance(), placeController));
            }

            @Override
            public void handleEventAccess(EventAccessProxy isNull) {
                setResult(new EventAccessListActivity(requests, ScaffoldApp.isMobile() ? EventAccessMobileListView.instance() : EventAccessListView.instance(), placeController));
            }

            @Override
            public void handleComment(CommentProxy isNull) {
                setResult(new CommentListActivity(requests, ScaffoldApp.isMobile() ? CommentMobileListView.instance() : CommentListView.instance(), placeController));
            }

            @Override
            public void handleAssesmentQuestion(AssesmentQuestionProxy isNull) {
                setResult(new AssesmentQuestionListActivity(requests, ScaffoldApp.isMobile() ? AssesmentQuestionMobileListView.instance() : AssesmentQuestionListView.instance(), placeController));
            }

            @Override
            public void handleAssesment(AssesmentProxy isNull) {
                setResult(new AssesmentListActivity(requests, ScaffoldApp.isMobile() ? AssesmentMobileListView.instance() : AssesmentListView.instance(), placeController));
            }

            @Override
            public void handleAnswerToAssQuestion(AnswerToAssQuestionProxy isNull) {
                setResult(new AnswerToAssQuestionListActivity(requests, ScaffoldApp.isMobile() ? AnswerToAssQuestionMobileListView.instance() : AnswerToAssQuestionListView.instance(), placeController));
            }

            @Override
            public void handleAnswer(AnswerProxy isNull) {
                setResult(new AnswerListActivity(requests, ScaffoldApp.isMobile() ? AnswerMobileListView.instance() : AnswerListView.instance(), placeController));
            }
        }.process(listPlace.getProxyClass());
    }
}
