// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package medizin.client.managed.activity;

import com.google.gwt.activity.shared.Activity;
import com.google.gwt.place.shared.PlaceController;
import com.google.gwt.requestfactory.shared.EntityProxyId;
import com.google.gwt.requestfactory.shared.RequestContext;
import medizin.client.managed.request.ApplicationRequestFactory;
import medizin.client.managed.request.EventAccessProxy;
import medizin.client.managed.request.EventAccessRequest;
import medizin.client.managed.request.PersonProxy;
import medizin.client.managed.request.QuestionEventProxy;
import medizin.client.managed.request.QuestionProxy;
import medizin.client.managed.ui.EventAccessDetailsView;
import medizin.client.managed.ui.EventAccessEditView;
import medizin.client.managed.ui.EventAccessListView;
import medizin.client.managed.ui.EventAccessMobileDetailsView;
import medizin.client.managed.ui.EventAccessMobileEditView;
import medizin.client.scaffold.ScaffoldApp;
import medizin.client.scaffold.place.CreateAndEditProxy;
import medizin.client.scaffold.place.FindAndEditProxy;
import medizin.client.scaffold.place.ProxyPlace;
import medizin.client.shared.AccessRights;

public class EventAccessActivitiesMapper {

    private final ApplicationRequestFactory requests;

    private final PlaceController placeController;

    public EventAccessActivitiesMapper(ApplicationRequestFactory requests, PlaceController placeController) {
        this.requests = requests;
        this.placeController = placeController;
    }

    public Activity getActivity(ProxyPlace place) {
        switch(place.getOperation()) {
            case DETAILS:
                return new EventAccessDetailsActivity((EntityProxyId<EventAccessProxy>) place.getProxyId(), requests, placeController, ScaffoldApp.isMobile() ? EventAccessMobileDetailsView.instance() : EventAccessDetailsView.instance());
            case EDIT:
                return makeEditActivity(place);
            case CREATE:
                return makeCreateActivity();
        }
        throw new IllegalArgumentException("Unknown operation " + place.getOperation());
    }

    @SuppressWarnings("unchecked")
    private EntityProxyId<medizin.client.managed.request.EventAccessProxy> coerceId(ProxyPlace place) {
        return (EntityProxyId<EventAccessProxy>) place.getProxyId();
    }

    private Activity makeCreateActivity() {
        EventAccessEditView.instance().setCreating(true);
        final EventAccessRequest request = requests.eventAccessRequest();
        Activity activity = new CreateAndEditProxy<EventAccessProxy>(EventAccessProxy.class, request, ScaffoldApp.isMobile() ? EventAccessMobileEditView.instance() : EventAccessEditView.instance(), placeController) {

            @Override
            protected RequestContext createSaveRequest(EventAccessProxy proxy) {
                request.persist().using(proxy);
                return request;
            }
        };
        return new EventAccessEditActivityWrapper(requests, ScaffoldApp.isMobile() ? EventAccessMobileEditView.instance() : EventAccessEditView.instance(), activity, null);
    }

    private Activity makeEditActivity(ProxyPlace place) {
        EventAccessEditView.instance().setCreating(false);
        EntityProxyId<EventAccessProxy> proxyId = coerceId(place);
        Activity activity = new FindAndEditProxy<EventAccessProxy>(proxyId, requests, ScaffoldApp.isMobile() ? EventAccessMobileEditView.instance() : EventAccessEditView.instance(), placeController) {

            @Override
            protected RequestContext createSaveRequest(EventAccessProxy proxy) {
                EventAccessRequest request = requests.eventAccessRequest();
                request.persist().using(proxy);
                return request;
            }
        };
        return new EventAccessEditActivityWrapper(requests, ScaffoldApp.isMobile() ? EventAccessMobileEditView.instance() : EventAccessEditView.instance(), activity, proxyId);
    }
}
